version: '3.8'

networks:
  business-net:
    driver: bridge
  api-gateway-net:
    external: true
  service-net:
    external: true
  data-net:
    external: true
  observability-net:
    external: true

services:
  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: business-product-service
    restart: unless-stopped
    networks:
      - business-net
      - api-gateway-net
      - service-net
      - data-net
      - observability-net
    volumes:
      - ./product-service:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3010:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      SERVICE_NAME: product-service
      MONGODB_URI: mongodb://admin:admin_password@mongodb:27017/varai?authSource=admin
      REDIS_URI: redis://redis:6379
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic_password
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      LOG_LEVEL: info
    depends_on:
      - user-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: business-user-service
    restart: unless-stopped
    networks:
      - business-net
      - api-gateway-net
      - service-net
      - data-net
      - observability-net
    volumes:
      - ./user-service:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3011:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      SERVICE_NAME: user-service
      MONGODB_URI: mongodb://admin:admin_password@mongodb:27017/varai?authSource=admin
      REDIS_URI: redis://redis:6379
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
      KEYCLOAK_URL: http://keycloak:8080/auth
      KEYCLOAK_REALM: varai
      KEYCLOAK_CLIENT_ID: user-service
      KEYCLOAK_CLIENT_SECRET: user-service-secret
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic_password
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      LOG_LEVEL: info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: business-order-service
    restart: unless-stopped
    networks:
      - business-net
      - api-gateway-net
      - service-net
      - data-net
      - observability-net
    volumes:
      - ./order-service:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3012:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      SERVICE_NAME: order-service
      MONGODB_URI: mongodb://admin:admin_password@mongodb:27017/varai?authSource=admin
      REDIS_URI: redis://redis:6379
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
      PRODUCT_SERVICE_URL: http://product-service:3000
      USER_SERVICE_URL: http://user-service:3000
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic_password
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      LOG_LEVEL: info
    depends_on:
      - product-service
      - user-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: business-inventory-service
    restart: unless-stopped
    networks:
      - business-net
      - api-gateway-net
      - service-net
      - data-net
      - observability-net
    volumes:
      - ./inventory-service:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3013:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      SERVICE_NAME: inventory-service
      MONGODB_URI: mongodb://admin:admin_password@mongodb:27017/varai?authSource=admin
      REDIS_URI: redis://redis:6379
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
      PRODUCT_SERVICE_URL: http://product-service:3000
      ORDER_SERVICE_URL: http://order-service:3000
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic_password
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      LOG_LEVEL: info
    depends_on:
      - product-service
      - order-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Search Service
  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
    container_name: business-search-service
    restart: unless-stopped
    networks:
      - business-net
      - api-gateway-net
      - service-net
      - data-net
      - observability-net
    volumes:
      - ./search-service:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3014:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      SERVICE_NAME: search-service
      MONGODB_URI: mongodb://admin:admin_password@mongodb:27017/varai?authSource=admin
      REDIS_URI: redis://redis:6379
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin
      PRODUCT_SERVICE_URL: http://product-service:3000
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: elastic_password
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      LOG_LEVEL: info
    depends_on:
      - product-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Documentation
  api-docs:
    image: swaggerapi/swagger-ui:latest
    container_name: business-api-docs
    restart: unless-stopped
    networks:
      - business-net
      - api-gateway-net
    ports:
      - "3015:8080"
    environment:
      SWAGGER_JSON: /api-docs/openapi.json
      BASE_URL: /api-docs
    volumes:
      - ./api-docs:/api-docs