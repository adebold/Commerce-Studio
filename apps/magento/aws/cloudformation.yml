AWSTemplateFormatVersion: '2010-09-09'
Description: 'EyewearML Magento Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: staging
    AllowedValues: [staging, production]
    Description: Environment type

  DBPassword:
    Type: String
    NoEcho: true
    Description: Database admin password

  MagentoAdminEmail:
    Type: String
    Description: Magento admin email

  MagentoAdminPassword:
    Type: String
    NoEcho: true
    Description: Magento admin password

Mappings:
  EnvironmentMap:
    staging:
      DBInstanceClass: db.t3.medium
      CacheInstanceType: cache.t3.medium
      ECSInstanceType: t3.large
    production:
      DBInstanceClass: db.r5.large
      CacheInstanceType: cache.r5.large
      ECSInstanceType: c5.xlarge

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: magento
      Engine: mysql
      MasterUsername: magento
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !FindInMap [EnvironmentMap, !Ref Environment, DBInstanceClass]
      AllocatedStorage: '100'
      MaxAllocatedStorage: '1000'
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      BackupRetentionPeriod: 7
      MultiAZ: !If [IsProduction, true, false]

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RedisCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: Redis cluster for Magento
      AutomaticFailoverEnabled: true
      CacheNodeType: !FindInMap [EnvironmentMap, !Ref Environment, CacheInstanceType]
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      Engine: redis
      EngineVersion: '6.x'
      NumCacheClusters: 2
      SecurityGroupIds:
        - !Ref RedisSecurityGroup

  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Sub ${AWS::StackName}-search
      EngineVersion: OpenSearch_1.2
      ClusterConfig:
        InstanceType: t3.small.search
        InstanceCount: 2
        ZoneAwarenessEnabled: true
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 100
        VolumeType: gp3

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  MagentoTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-magento
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '2048'
      Memory: '4096'
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: magento
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/magento:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: MAGENTO_DATABASE_HOST
              Value: !GetAtt Database.Endpoint.Address
            - Name: MAGENTO_DATABASE_NAME
              Value: magento
            - Name: MAGENTO_DATABASE_USER
              Value: magento
            - Name: MAGENTO_DATABASE_PASSWORD
              Value: !Ref DBPassword
            - Name: MAGENTO_ADMIN_EMAIL
              Value: !Ref MagentoAdminEmail
            - Name: MAGENTO_ADMIN_PASSWORD
              Value: !Ref MagentoAdminPassword
            - Name: REDIS_HOST
              Value: !GetAtt RedisCluster.PrimaryEndPoint.Address
            - Name: ELASTICSEARCH_HOST
              Value: !GetAtt OpenSearchDomain.DomainEndpoint
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: magento

  MagentoService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-magento
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref MagentoTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: magento
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health_check.php
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 30

Outputs:
  LoadBalancerDNS:
    Description: Load balancer DNS name
    Value: !GetAtt LoadBalancer.DNSName

  DatabaseEndpoint:
    Description: Database endpoint
    Value: !GetAtt Database.Endpoint.Address

  RedisEndpoint:
    Description: Redis endpoint
    Value: !GetAtt RedisCluster.PrimaryEndPoint.Address

  OpenSearchEndpoint:
    Description: OpenSearch endpoint
    Value: !GetAtt OpenSearchDomain.DomainEndpoint
