name: Magento AWS Deployment

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'apps/magento/**'
  pull_request:
    paths:
      - 'apps/magento/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: magento
  ECS_CLUSTER: eyewearml-magento
  ECS_SERVICE: magento-service
  CONTAINER_NAME: magento

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd apps/magento
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy CloudFormation Stack
        run: |
          STACK_NAME="eyewearml-magento-${{ github.event.ref == 'refs/heads/main' && 'prod' || 'staging' }}"
          aws cloudformation deploy \
            --template-file apps/magento/aws/cloudformation.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              Environment=${{ github.event.ref == 'refs/heads/main' && 'production' || 'staging' }} \
              DBPassword=${{ secrets.DB_PASSWORD }} \
              MagentoAdminEmail=${{ secrets.MAGENTO_ADMIN_EMAIL }} \
              MagentoAdminPassword=${{ secrets.MAGENTO_ADMIN_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment

      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Get Load Balancer DNS
        id: get-dns
        run: |
          DNS=$(aws cloudformation describe-stacks \
            --stack-name eyewearml-magento-${{ github.event.ref == 'refs/heads/main' && 'prod' || 'staging' }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text)
          echo "::set-output name=dns::$DNS"

      - name: Run Health Check
        run: |
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" http://${{ steps.get-dns.outputs.dns }}/health_check.php | grep 200; then
              exit 0
            fi
            sleep 10
          done
          exit 1

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            Deployment to ${{ github.event.ref == 'refs/heads/main' && 'production' || 'staging' }} ${{ job.status == 'success' && 'succeeded' || 'failed' }}
            Environment URL: http://${{ steps.get-dns.outputs.dns }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v5
        with:
          script: |
            const dns = process.env.DNS;
            const body = `Staging environment deployed at: http://${dns}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: body
            });
        env:
          DNS: ${{ steps.get-dns.outputs.dns }}
