name: Deploy Application

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - canary
          - blue-green
      component:
        description: 'Component to deploy (required for canary deployments)'
        required: false
        type: string
      percentage:
        description: 'Percentage of traffic for canary deployment'
        required: false
        default: '10'
        type: string
      promote_canary:
        description: 'Promote canary deployment to full deployment'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run unit tests
        run: |
          pytest tests/unit/ --cov=src

  build:
    name: Build and Push
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Google Container Registry
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Set image tag
        id: set-image-tag
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          SHA=${GITHUB_SHA::8}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_TAG="${BRANCH}-${SHA}-${TIMESTAMP}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${IMAGE_TAG}"

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/api:${{ steps.set-image-tag.outputs.image_tag }}
            gcr.io/${{ env.PROJECT_ID }}/api:latest

      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/frontend:${{ steps.set-image-tag.outputs.image_tag }}
            gcr.io/${{ env.PROJECT_ID }}/frontend:latest

  deploy-development:
    name: Deploy to Development
    needs: build
    if: github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ env.PROJECT_ID }}

      - name: Update Kubernetes manifests
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/api:.*|gcr.io/${{ env.PROJECT_ID }}/api:${{ needs.build.outputs.image_tag }}|g" kubernetes/overlays/development/kustomization.yaml
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/frontend:.*|gcr.io/${{ env.PROJECT_ID }}/frontend:${{ needs.build.outputs.image_tag }}|g" kubernetes/overlays/development/kustomization.yaml

      - name: Deploy to development
        run: |
          python deploy_with_rollback.py --environment development

      - name: Run smoke tests
        run: |
          python -m tests.e2e.smoke_tests --env development

  deploy-staging:
    name: Deploy to Staging
    needs: [build, deploy-development]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ env.PROJECT_ID }}

      - name: Update Kubernetes manifests
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/api:.*|gcr.io/${{ env.PROJECT_ID }}/api:${{ needs.build.outputs.image_tag }}|g" kubernetes/overlays/staging/kustomization.yaml
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/frontend:.*|gcr.io/${{ env.PROJECT_ID }}/frontend:${{ needs.build.outputs.image_tag }}|g" kubernetes/overlays/staging/kustomization.yaml

      - name: Deploy to staging
        if: ${{ github.event.inputs.deployment_type != 'canary' || github.event.inputs.deployment_type == '' }}
        run: |
          python deploy_with_rollback.py --environment staging

      - name: Deploy canary to staging
        if: ${{ github.event.inputs.deployment_type == 'canary' && github.event.inputs.component != '' }}
        run: |
          python deploy_with_rollback.py --environment staging --type canary --component ${{ github.event.inputs.component }} --percentage ${{ github.event.inputs.percentage }}

      - name: Promote canary to full deployment
        if: ${{ github.event.inputs.promote_canary == 'true' && github.event.inputs.component != '' }}
        run: |
          python deploy_with_rollback.py --environment staging --promote --component ${{ github.event.inputs.component }}

      - name: Run smoke tests
        run: |
          python -m tests.e2e.smoke_tests --env staging

      - name: Run integration tests
        run: |
          python -m tests.integration --env staging

  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ env.PROJECT_ID }}

      - name: Update Kubernetes manifests
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/api:.*|gcr.io/${{ env.PROJECT_ID }}/api:${{ needs.build.outputs.image_tag }}|g" kubernetes/overlays/production/kustomization.yaml
          sed -i "s|gcr.io/${{ env.PROJECT_ID }}/frontend:.*|gcr.io/${{ env.PROJECT_ID }}/frontend:${{ needs.build.outputs.image_tag }}|g" kubernetes/overlays/production/kustomization.yaml

      - name: Deploy to production
        if: ${{ github.event.inputs.deployment_type != 'canary' || github.event.inputs.deployment_type == '' }}
        run: |
          python deploy_with_rollback.py --environment production

      - name: Deploy canary to production
        if: ${{ github.event.inputs.deployment_type == 'canary' && github.event.inputs.component != '' }}
        run: |
          python deploy_with_rollback.py --environment production --type canary --component ${{ github.event.inputs.component }} --percentage ${{ github.event.inputs.percentage }}

      - name: Promote canary to full deployment
        if: ${{ github.event.inputs.promote_canary == 'true' && github.event.inputs.component != '' }}
        run: |
          python deploy_with_rollback.py --environment production --promote --component ${{ github.event.inputs.component }}

      - name: Run smoke tests
        run: |
          python -m tests.e2e.smoke_tests --env production

      - name: Run integration tests
        run: |
          python -m tests.integration --env production

  notify:
    name: Notify
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
