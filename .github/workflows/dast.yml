name: Dynamic Application Security Testing (DAST)

on:
  workflow_run:
    workflows: ["Continuous Deployment"]
    types:
      - completed
    branches:
      - main
      - develop
  repository_dispatch:
    types: [run-dast-scan]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      target_url:
        description: 'Target URL to scan (leave empty for default environment URL)'
        required: false
        type: string

jobs:
  prepare:
    name: Prepare DAST
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      target_url: ${{ steps.set-target.outputs.target_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
      
      - name: Set target URL
        id: set-target
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.target_url }}" ]; then
            echo "target_url=${{ github.event.inputs.target_url }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "repository_dispatch" ] && [ -n "${{ github.event.client_payload.target_url }}" ]; then
            echo "target_url=${{ github.event.client_payload.target_url }}" >> $GITHUB_OUTPUT
          else
            if [ "${{ steps.set-env.outputs.environment }}" == "production" ]; then
              echo "target_url=https://eyewearml.com" >> $GITHUB_OUTPUT
            elif [ "${{ steps.set-env.outputs.environment }}" == "staging" ]; then
              echo "target_url=https://staging.eyewearml.com" >> $GITHUB_OUTPUT
            else
              echo "target_url=https://dev.eyewearml.com" >> $GITHUB_OUTPUT
            fi
          fi

  run-dast:
    name: Run DAST Scan
    runs-on: ubuntu-latest
    needs: prepare
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: ${{ needs.prepare.outputs.target_url }}
          rules_file_name: '.github/zap-rules.tsv'
          cmd_options: '-a -j'
          allow_issue_writing: true
      
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-report-${{ needs.prepare.outputs.environment }}
          path: |
            report.html
            report.json
      
      - name: Process ZAP Results
        run: |
          # Create directory for DAST results
          mkdir -p security/dast-results
          
          # Move ZAP reports to the directory
          mv report.html security/dast-results/zap-report-${{ needs.prepare.outputs.environment }}-$(date +%Y%m%d).html
          mv report.json security/dast-results/zap-report-${{ needs.prepare.outputs.environment }}-$(date +%Y%m%d).json
          
          # Extract high and critical alerts
          HIGH_ALERTS=$(cat security/dast-results/zap-report-${{ needs.prepare.outputs.environment }}-$(date +%Y%m%d).json | jq '.site[0].alerts | map(select(.riskcode >= 3)) | length')
          
          echo "Found $HIGH_ALERTS high or critical security issues"
          
          # Create summary file
          cat > security/dast-results/summary-${{ needs.prepare.outputs.environment }}-$(date +%Y%m%d).md << EOF
          # DAST Scan Summary for ${{ needs.prepare.outputs.environment }}
          
          - **Date:** $(date -u +%Y-%m-%d)
          - **Target:** ${{ needs.prepare.outputs.target_url }}
          - **High/Critical Issues:** $HIGH_ALERTS
          
          ## Next Steps
          
          1. Review the full report in the artifacts
          2. Address high and critical issues immediately
          3. Create tickets for medium and low issues
          
          EOF
          
          # Store the number of high alerts for later use
          echo "HIGH_ALERTS=$HIGH_ALERTS" >> $GITHUB_ENV
      
      - name: Send notification for high-risk issues
        if: env.HIGH_ALERTS != '0'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "⚠️ DAST scan found security issues in ${{ needs.prepare.outputs.environment }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "⚠️ Security Issues Detected"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ needs.prepare.outputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*High/Critical Issues:*\n${{ env.HIGH_ALERTS }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please review the DAST scan report in the GitHub Actions artifacts."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK