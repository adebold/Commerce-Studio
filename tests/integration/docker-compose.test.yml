version: '3.9'

services:
  # Base service for shared configuration
  test-base:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ../../:/app
    environment:
      - NODE_ENV=test
      - JEST_JUNIT_OUTPUT_DIR=/app/test-results/junit

  # API service
  api:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=test
      - MONGODB_URI=mongodb://mongo:27017/varai_test
      - AUTH_SECRET=test_secret
      - AUTH_ISSUER=varai-test
      - AUTH_AUDIENCE=varai-api-test
      - LOG_LEVEL=debug
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Authentication service
  auth:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: auth
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=test
      - MONGODB_URI=mongodb://mongo:27017/varai_test
      - AUTH_SECRET=test_secret
      - AUTH_ISSUER=varai-test
      - AUTH_AUDIENCE=varai-api-test
      - LOG_LEVEL=debug
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Recommendation service
  recommendation:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: recommendation
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=test
      - MONGODB_URI=mongodb://mongo:27017/varai_test
      - AUTH_SECRET=test_secret
      - AUTH_ISSUER=varai-test
      - AUTH_AUDIENCE=varai-api-test
      - LOG_LEVEL=debug
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Virtual try-on service
  virtual-try-on:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: virtual-try-on
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=test
      - MONGODB_URI=mongodb://mongo:27017/varai_test
      - AUTH_SECRET=test_secret
      - AUTH_ISSUER=varai-test
      - AUTH_AUDIENCE=varai-api-test
      - LOG_LEVEL=debug
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Analytics service
  analytics:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: analytics
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=test
      - MONGODB_URI=mongodb://mongo:27017/varai_test
      - AUTH_SECRET=test_secret
      - AUTH_ISSUER=varai-test
      - AUTH_AUDIENCE=varai-api-test
      - LOG_LEVEL=debug
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Frontend service
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=test
      - API_URL=http://api:3000
      - AUTH_URL=http://auth:3001
      - RECOMMENDATION_URL=http://recommendation:3002
      - VIRTUAL_TRY_ON_URL=http://virtual-try-on:3003
      - ANALYTICS_URL=http://analytics:3004
    depends_on:
      - api
      - auth
      - recommendation
      - virtual-try-on
      - analytics

  # MongoDB
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mock Shopify store
  mock-shopify:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./mocks/shopify:/app
    command: node server.js
    ports:
      - "3100:3100"
    environment:
      - PORT=3100
      - MOCK_DATA_DIR=/app/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3100/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mock Magento store
  mock-magento:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./mocks/magento:/app
    command: node server.js
    ports:
      - "3101:3101"
    environment:
      - PORT=3101
      - MOCK_DATA_DIR=/app/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3101/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mock WooCommerce store
  mock-woocommerce:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./mocks/woocommerce:/app
    command: node server.js
    ports:
      - "3102:3102"
    environment:
      - PORT=3102
      - MOCK_DATA_DIR=/app/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3102/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mock BigCommerce store
  mock-bigcommerce:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./mocks/bigcommerce:/app
    command: node server.js
    ports:
      - "3103:3103"
    environment:
      - PORT=3103
      - MOCK_DATA_DIR=/app/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3103/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Test runner for API tests
  api-test-runner:
    extends:
      service: test-base
    command: npm run test:integration:api
    environment:
      - API_URL=http://api:3000
      - AUTH_URL=http://auth:3001
      - RECOMMENDATION_URL=http://recommendation:3002
      - VIRTUAL_TRY_ON_URL=http://virtual-try-on:3003
      - ANALYTICS_URL=http://analytics:3004
      - MONGODB_URI=mongodb://mongo:27017/varai_test
    depends_on:
      - api
      - auth
      - recommendation
      - virtual-try-on
      - analytics
      - mongo

  # Test runner for UI tests
  ui-test-runner:
    image: mcr.microsoft.com/playwright:v1.40.0-focal
    working_dir: /app
    volumes:
      - ../../:/app
    command: npm run test:integration:ui
    environment:
      - BASE_URL=http://frontend:8080
      - API_URL=http://api:3000
      - AUTH_URL=http://auth:3001
      - RECOMMENDATION_URL=http://recommendation:3002
      - VIRTUAL_TRY_ON_URL=http://virtual-try-on:3003
      - ANALYTICS_URL=http://analytics:3004
      - SHOPIFY_URL=http://mock-shopify:3100
      - MAGENTO_URL=http://mock-magento:3101
      - WOOCOMMERCE_URL=http://mock-woocommerce:3102
      - BIGCOMMERCE_URL=http://mock-bigcommerce:3103
    depends_on:
      - frontend
      - mock-shopify
      - mock-magento
      - mock-woocommerce
      - mock-bigcommerce

  # Test runner for e-commerce integration tests
  ecommerce-test-runner:
    extends:
      service: test-base
    command: npm run test:integration:ecommerce
    environment:
      - API_URL=http://api:3000
      - SHOPIFY_URL=http://mock-shopify:3100
      - MAGENTO_URL=http://mock-magento:3101
      - WOOCOMMERCE_URL=http://mock-woocommerce:3102
      - BIGCOMMERCE_URL=http://mock-bigcommerce:3103
    depends_on:
      - api
      - mock-shopify
      - mock-magento
      - mock-woocommerce
      - mock-bigcommerce

  # Test runner for performance tests
  performance-test-runner:
    image: loadimpact/k6:latest
    volumes:
      - ./performance:/scripts
    command: run /scripts/load-test.js
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
    depends_on:
      - api
      - auth
      - recommendation
      - virtual-try-on
      - analytics
      - influxdb
      - grafana

  # InfluxDB for storing performance test results
  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    volumes:
      - influxdb-data:/var/lib/influxdb

  # Grafana for visualizing performance test results
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./performance/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - influxdb

volumes:
  mongo-data:
  influxdb-data:
  grafana-data: