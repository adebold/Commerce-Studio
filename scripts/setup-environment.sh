#!/bin/bash

# Commerce Studio Environment Setup Script
# Sets up essential environment variables for the centralized configuration system

echo "üöÄ Commerce Studio Environment Setup"
echo "===================================="

# Check if we're in the right directory
if [ ! -f "config/environments/development.yaml" ]; then
    echo "‚ùå Error: Please run this script from the Commerce Studio root directory"
    exit 1
fi

echo ""
echo "üìã Setting up essential environment variables..."

# Function to prompt for input with validation
prompt_for_input() {
    local var_name=$1
    local description=$2
    local example=$3
    local current_value=${!var_name}
    
    echo ""
    echo "üîß Setting up: $var_name"
    echo "   Description: $description"
    echo "   Example: $example"
    
    if [ ! -z "$current_value" ]; then
        echo "   Current value: $current_value"
        read -p "   Keep current value? (y/n): " keep_current
        if [ "$keep_current" = "y" ] || [ "$keep_current" = "Y" ]; then
            return
        fi
    fi
    
    read -p "   Enter value: " new_value
    
    if [ ! -z "$new_value" ]; then
        export $var_name="$new_value"
        echo "export $var_name=\"$new_value\"" >> ~/.bashrc
        echo "   ‚úÖ Set $var_name"
    else
        echo "   ‚ö†Ô∏è  Skipped $var_name (no value provided)"
    fi
}

# Set up Google Application Credentials
echo ""
echo "üîë Google Cloud Service Account Setup"
echo "You need a service account key file for Google Cloud authentication."
echo "If you don't have one, create it at: https://console.cloud.google.com/iam-admin/serviceaccounts"

prompt_for_input "GOOGLE_APPLICATION_CREDENTIALS" \
    "Path to your Google Cloud service account key file" \
    "/path/to/service-account-key.json"

# Validate the credentials file exists
if [ ! -z "$GOOGLE_APPLICATION_CREDENTIALS" ] && [ ! -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
    echo "   ‚ùå Warning: Credentials file not found at $GOOGLE_APPLICATION_CREDENTIALS"
    echo "   Please ensure the file exists and the path is correct."
fi

# Set up Dialogflow Agent ID
echo ""
echo "ü§ñ Dialogflow CX Agent Setup"
echo "You need your Dialogflow CX Agent ID."
echo "Find it at: https://dialogflow.cloud.google.com/cx/projects"

prompt_for_input "DIALOGFLOW_AGENT_ID" \
    "Your Dialogflow CX Agent ID" \
    "12345678-1234-1234-1234-123456789abc"

# Optional: Set up other environment variables
echo ""
echo "üìù Optional Configuration (will use defaults from config files if not set)"

prompt_for_input "GOOGLE_CLOUD_PROJECT_ID" \
    "Your Google Cloud Project ID" \
    "eyewearml-conversational-ai"

# Create a .env file for local development
echo ""
echo "üìÑ Creating .env file for local development..."

cat > .env << EOF
# Commerce Studio Environment Variables
# Generated by setup-environment.sh on $(date)

# Essential Variables
GOOGLE_APPLICATION_CREDENTIALS="$GOOGLE_APPLICATION_CREDENTIALS"
DIALOGFLOW_AGENT_ID="$DIALOGFLOW_AGENT_ID"

# Optional Variables (uncomment and set if needed)
# GOOGLE_CLOUD_PROJECT_ID="$GOOGLE_CLOUD_PROJECT_ID"
# DIALOGFLOW_LOCATION="us-central1"
# NODE_ENV="development"
# LOG_LEVEL="debug"

# Security (generate these for production)
# JWT_SECRET="your-jwt-secret-here"
# SESSION_SECRET="your-session-secret-here"
# ENCRYPTION_KEY="your-encryption-key-here"

# External Services (set if using)
# NVIDIA_API_KEY="your-nvidia-api-key"
# SHOPIFY_WEBHOOK_SECRET="your-shopify-webhook-secret"
EOF

echo "‚úÖ Created .env file"

# Test the configuration
echo ""
echo "üß™ Testing Configuration..."

if [ ! -z "$GOOGLE_APPLICATION_CREDENTIALS" ] && [ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
    echo "‚úÖ Google Cloud credentials file exists"
    
    # Try to validate the JSON
    if python3 -m json.tool "$GOOGLE_APPLICATION_CREDENTIALS" > /dev/null 2>&1; then
        echo "‚úÖ Credentials file is valid JSON"
    else
        echo "‚ùå Credentials file is not valid JSON"
    fi
else
    echo "‚ùå Google Cloud credentials file not found"
fi

if [ ! -z "$DIALOGFLOW_AGENT_ID" ]; then
    echo "‚úÖ Dialogflow Agent ID is set"
else
    echo "‚ùå Dialogflow Agent ID is not set"
fi

# Final instructions
echo ""
echo "üéØ Next Steps:"
echo "1. Source your environment: source ~/.bashrc"
echo "2. Or restart your terminal"
echo "3. Start your application server"
echo "4. Test the API endpoint"
echo ""
echo "üîß Test Commands:"
echo "# Test Google Cloud auth:"
echo "gcloud auth application-default print-access-token"
echo ""
echo "# Test your API:"
echo "curl -X POST http://localhost:3000/api/chat \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{\"message\":\"test\",\"sessionId\":\"test-123\"}'"
echo ""
echo "‚úÖ Setup complete! Your 'Internal server error' should now be resolved."