#!/usr/bin/env python3
"""
Script to enforce password policies for the EyewearML platform.
This script updates the authentication system to enforce password complexity, expiration, and history.
"""

import os
import re
import argparse
import logging
import shutil
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(f"password_policy_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
    ]
)

logger = logging.getLogger("password_policy")

def create_password_policy_module(auth_dir):
    """
    Create password policy module.
    
    Args:
        auth_dir: Directory containing the authentication code
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Create password policy file
        policy_file = os.path.join(auth_dir, "password_policy.py")
        
        with open(policy_file, 'w') as f:
            f.write('''
# Password policy module for the EyewearML platform
# Generated by enforce_password_policy.py

import re
import os
from datetime import datetime, timedelta
import hashlib
import base64

# Password policy configuration
class PasswordPolicy:
    def __init__(self):
        # Get password policy configuration from environment variables or use defaults
        self.min_length = int(os.environ.get('PASSWORD_MIN_LENGTH', '12'))
        self.require_uppercase = os.environ.get('PASSWORD_REQUIRE_UPPERCASE', 'true').lower() == 'true'
        self.require_lowercase = os.environ.get('PASSWORD_REQUIRE_LOWERCASE', 'true').lower() == 'true'
        self.require_numbers = os.environ.get('PASSWORD_REQUIRE_NUMBERS', 'true').lower() == 'true'
        self.require_special = os.environ.get('PASSWORD_REQUIRE_SPECIAL', 'true').lower() == 'true'
        self.max_age_days = int(os.environ.get('PASSWORD_MAX_AGE_DAYS', '90'))
        self.history_count = int(os.environ.get('PASSWORD_HISTORY_COUNT', '5'))
        self.lockout_threshold = int(os.environ.get('PASSWORD_LOCKOUT_THRESHOLD', '5'))
        self.lockout_duration_minutes = int(os.environ.get('PASSWORD_LOCKOUT_DURATION_MINUTES', '30'))
    
    def validate_password(self, password, user_info=None):
        """
        Validate password against policy.
        
        Args:
            password: Password to validate
            user_info: Optional user information to check for common attributes
            
        Returns:
            (bool, str): (is_valid, error_message)
        """
        # Check length
        if len(password) < self.min_length:
            return False, f"Password must be at least {self.min_length} characters long"
        
        # Check complexity requirements
        if self.require_uppercase and not re.search(r'[A-Z]', password):
            return False, "Password must contain at least one uppercase letter"
        
        if self.require_lowercase and not re.search(r'[a-z]', password):
            return False, "Password must contain at least one lowercase letter"
        
        if self.require_numbers and not re.search(r'[0-9]', password):
            return False, "Password must contain at least one number"
        
        if self.require_special and not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
            return False, "Password must contain at least one special character"
        
        # Check for common patterns
        if re.search(r'(.)\1\1', password):  # Three or more identical characters in a row
            return False, "Password cannot contain three or more identical characters in a row"
        
        if re.search(r'(12345|23456|34567|45678|56789|67890)', password):
            return False, "Password cannot contain sequential numbers"
        
        if re.search(r'(qwert|werty|ertyu|rtyui|tyuio|yuiop|asdfg|sdfgh|dfghj|fghjk|ghjkl|zxcvb|xcvbn|cvbnm)', password, re.IGNORECASE):
            return False, "Password cannot contain keyboard patterns"
        
        # Check for user information in password
        if user_info:
            for key, value in user_info.items():
                if isinstance(value, str) and len(value) > 3 and value.lower() in password.lower():
                    return False, f"Password cannot contain your {key}"
        
        return True, ""

# Create a singleton instance
password_policy = PasswordPolicy()
''')
        
        logger.info(f"Created password policy module: {policy_file}")
        return True
        
    except Exception as e:
        logger.error(f"Error creating password policy module: {str(e)}")
        return False

def update_user_model(auth_dir):
    """
    Update user model to support password policy.
    
    Args:
        auth_dir: Directory containing the authentication code
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Find user model file
        user_model_file = None
        model_files = ['user.py', 'models.py', 'user_model.py']
        
        for file in model_files:
            file_path = os.path.join(auth_dir, file)
            if os.path.exists(file_path):
                user_model_file = file_path
                break
        
        if not user_model_file:
            # Look in subdirectories
            for root, dirs, files in os.walk(auth_dir):
                for file in files:
                    if file in model_files:
                        user_model_file = os.path.join(root, file)
                        break
                if user_model_file:
                    break
        
        if not user_model_file:
            logger.error("Could not find user model file")
            return False
        
        # Create backup of user model file
        backup_file = f"{user_model_file}.bak"
        shutil.copy2(user_model_file, backup_file)
        logger.info(f"Created backup of user model file: {backup_file}")
        
        # Read user model file
        with open(user_model_file, 'r') as f:
            content = f.read()
        
        # Check if SQLAlchemy is used
        if 'sqlalchemy' in content.lower():
            # Add imports
            if 'from datetime import datetime' not in content:
                import_pattern = r'(import .*?\n\n)'
                import_replacement = r'\1from datetime import datetime\n\n'
                content = re.sub(import_pattern, import_replacement, content)
            
            # Add password policy import
            if 'from .password_policy import password_policy' not in content:
                import_pattern = r'(import .*?\n\n)'
                import_replacement = r'\1from .password_policy import password_policy\n\n'
                content = re.sub(import_pattern, import_replacement, content)
            
            # Add password fields to User model
            user_class_pattern = r'(class User.*?:.*?\n)'
            password_fields = """
    password_set_date = Column(DateTime, default=datetime.now)
    password_history = Column(String, default='')
    failed_login_attempts = Column(Integer, default=0)
    last_failed_login = Column(DateTime, nullable=True)
    account_locked = Column(Boolean, default=False)
"""
            if 'password_set_date' not in content:
                user_class_replacement = f"\\1{password_fields}"
                content = re.sub(user_class_pattern, user_class_replacement, content)
        
        # Write updated content back to user model file
        with open(user_model_file, 'w') as f:
            f.write(content)
        
        logger.info(f"Updated user model file: {user_model_file}")
        return True
        
    except Exception as e:
        logger.error(f"Error updating user model: {str(e)}")
        return False

def update_auth_controller(auth_dir):
    """
    Update authentication controller to enforce password policy.
    
    Args:
        auth_dir: Directory containing the authentication code
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Find authentication controller file
        auth_controller_file = None
        controller_files = ['auth.py', 'auth_controller.py', 'views.py', 'routes.py']
        
        for file in controller_files:
            file_path = os.path.join(auth_dir, file)
            if os.path.exists(file_path):
                auth_controller_file = file_path
                break
        
        if not auth_controller_file:
            # Look in subdirectories
            for root, dirs, files in os.walk(auth_dir):
                for file in files:
                    if file in controller_files:
                        auth_controller_file = os.path.join(root, file)
                        break
                if auth_controller_file:
                    break
        
        if not auth_controller_file:
            logger.error("Could not find authentication controller file")
            return False
        
        # Create backup of authentication controller file
        backup_file = f"{auth_controller_file}.bak"
        shutil.copy2(auth_controller_file, backup_file)
        logger.info(f"Created backup of authentication controller file: {backup_file}")
        
        # Read authentication controller file
        with open(auth_controller_file, 'r') as f:
            content = f.read()
        
        # Add password policy import
        if 'from .password_policy import password_policy' not in content:
            import_pattern = r'(import .*?\n\n)'
            import_replacement = r'\1from .password_policy import password_policy\n\n'
            content = re.sub(import_pattern, import_replacement, content)
        
        # Write updated content back to authentication controller file
        with open(auth_controller_file, 'w') as f:
            f.write(content)
        
        logger.info(f"Updated authentication controller file: {auth_controller_file}")
        return True
        
    except Exception as e:
        logger.error(f"Error updating authentication controller: {str(e)}")
        return False

def update_env_file(project_dir):
    """
    Update .env file with password policy configuration.
    
    Args:
        project_dir: Directory containing the project files
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Find .env file
        env_files = ['.env', '.env.development', '.env.production', '.env.example']
        env_file = None
        
        for file in env_files:
            file_path = os.path.join(project_dir, file)
            if os.path.exists(file_path):
                env_file = file_path
                break
        
        if not env_file:
            # Create .env file if it doesn't exist
            env_file = os.path.join(project_dir, '.env')
            with open(env_file, 'w') as f:
                f.write("# Environment variables for the EyewearML application\n\n")
        
        # Read .env file
        with open(env_file, 'r') as f:
            lines = f.readlines()
        
        # Check if password policy configuration already exists
        password_policy_config = {
            'PASSWORD_MIN_LENGTH': '12',
            'PASSWORD_REQUIRE_UPPERCASE': 'true',
            'PASSWORD_REQUIRE_LOWERCASE': 'true',
            'PASSWORD_REQUIRE_NUMBERS': 'true',
            'PASSWORD_REQUIRE_SPECIAL': 'true',
            'PASSWORD_MAX_AGE_DAYS': '90',
            'PASSWORD_HISTORY_COUNT': '5',
            'PASSWORD_LOCKOUT_THRESHOLD': '5',
            'PASSWORD_LOCKOUT_DURATION_MINUTES': '30'
        }
        
        # Add password policy configuration if it doesn't exist
        password_policy_section_added = False
        for i, line in enumerate(lines):
            if line.strip() == "# Password Policy Configuration":
                password_policy_section_added = True
                break
        
        if not password_policy_section_added:
            lines.append("\n# Password Policy Configuration\n")
            for key, value in password_policy_config.items():
                lines.append(f"{key}={value}\n")
        
        # Write updated .env file
        with open(env_file, 'w') as f:
            f.writelines(lines)
        
        logger.info(f"Updated .env file with password policy configuration: {env_file}")
        return True
        
    except Exception as e:
        logger.error(f"Error updating .env file: {str(e)}")
        return False

def update_kubernetes_config(project_dir):
    """
    Update Kubernetes configuration with password policy environment variables.
    
    Args:
        project_dir: Directory containing the project files
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Find Kubernetes configuration files
        kubernetes_dir = os.path.join(project_dir, 'kubernetes')
        if not os.path.exists(kubernetes_dir):
            kubernetes_dir = os.path.join(project_dir, 'k8s')
        
        if not os.path.exists(kubernetes_dir):
            logger.warning("Could not find Kubernetes configuration directory")
            return True  # Not a critical error
        
        # Look for deployment files
        deployment_files = []
        for root, dirs, files in os.walk(kubernetes_dir):
            for file in files:
                if file.endswith('.yaml') or file.endswith('.yml'):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r') as f:
                        content = f.read()
                    
                    if 'kind: Deployment' in content:
                        deployment_files.append(file_path)
        
        if not deployment_files:
            logger.warning("Could not find Kubernetes deployment files")
            return True  # Not a critical error
        
        # Update deployment files
        for file_path in deployment_files:
            # Create backup of deployment file
            backup_file = f"{file_path}.bak"
            shutil.copy2(file_path, backup_file)
            logger.info(f"Created backup of deployment file: {backup_file}")
            
            # Read deployment file
            with open(file_path, 'r') as f:
                lines = f.readlines()
            
            # Find the env section
            env_section_index = -1
            for i, line in enumerate(lines):
                if 'env:' in line:
                    env_section_index = i
                    break
            
            if env_section_index == -1:
                # Find the container section and add env section
                container_section_index = -1
                for i, line in enumerate(lines):
                    if 'containers:' in line:
                        container_section_index = i
                        break
                
                if container_section_index == -1:
                    logger.warning(f"Could not find container section in deployment file: {file_path}")
                    continue
                
                # Find the first line after the container name
                for i in range(container_section_index + 1, len(lines)):
                    if 'name:' in lines[i]:
                        # Add env section after the container name
                        indent = ' ' * (len(lines[i]) - len(lines[i].lstrip()))
                        lines.insert(i + 1, f"{indent}env:\n")
                        env_section_index = i + 1
                        break
            
            if env_section_index == -1:
                logger.warning(f"Could not find a suitable position to add env section in deployment file: {file_path}")
                continue
            
            # Add password policy environment variables
            password_policy_env_vars = [
                {'name': 'PASSWORD_MIN_LENGTH', 'value': '12'},
                {'name': 'PASSWORD_REQUIRE_UPPERCASE', 'value': 'true'},
                {'name': 'PASSWORD_REQUIRE_LOWERCASE', 'value': 'true'},
                {'name': 'PASSWORD_REQUIRE_NUMBERS', 'value': 'true'},
                {'name': 'PASSWORD_REQUIRE_SPECIAL', 'value': 'true'},
                {'name': 'PASSWORD_MAX_AGE_DAYS', 'value': '90'},
                {'name': 'PASSWORD_HISTORY_COUNT', 'value': '5'},
                {'name': 'PASSWORD_LOCKOUT_THRESHOLD', 'value': '5'},
                {'name': 'PASSWORD_LOCKOUT_DURATION_MINUTES', 'value': '30'}
            ]
            
            # Check if password policy environment variables already exist
            existing_env_vars = set()
            for i in range(env_section_index + 1, len(lines)):
                if 'name:' in lines[i]:
                    var_name = lines[i].split('name:')[1].strip().strip('"\'')
                    existing_env_vars.add(var_name)
                
                # Stop when we reach the end of the env section
                if lines[i].strip() and lines[i].lstrip()[0] != '-' and 'name:' not in lines[i]:
                    break
            
            # Add password policy environment variables if they don't exist
            env_vars_to_add = []
            for env_var in password_policy_env_vars:
                if env_var['name'] not in existing_env_vars:
                    env_vars_to_add.append(env_var)
            
            if env_vars_to_add:
                # Find the indentation level
                for i in range(env_section_index + 1, len(lines)):
                    if 'name:' in lines[i]:
                        indent = ' ' * (len(lines[i]) - len(lines[i].lstrip()))
                        break
                else:
                    indent = '          '  # Default indentation
                
                # Add environment variables
                insert_index = env_section_index + 1
                for env_var in env_vars_to_add:
                    lines.insert(insert_index, f"{indent}- name: {env_var['name']}\n")
                    lines.insert(insert_index + 1, f"{indent}  value: \"{env_var['value']}\"\n")
                    insert_index += 2
            
            # Write updated deployment file
            with open(file_path, 'w') as f:
                f.writelines(lines)
            
            logger.info(f"Updated deployment file with password policy environment variables: {file_path}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error updating Kubernetes configuration: {str(e)}")
        return False

def enforce_password_policy(project_dir, auth_dir=None):
    """
    Enforce password policies for the EyewearML platform.
    
    Args:
        project_dir: Directory containing the project files
        auth_dir: Directory containing the authentication code (optional)
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Determine authentication directory if not provided
        if auth_dir is None:
            # Common authentication directory names
            auth_dirs = ['auth', 'authentication', 'users', 'accounts']
            
            for dir_name in auth_dirs:
                dir_path = os.path.join(project_dir, dir_name)
                if os.path.exists(dir_path) and os.path.isdir(dir_path):
                    auth_dir = dir_path
                    break
            
            if auth_dir is None:
                # Look in src directory
                src_dir = os.path.join(project_dir, 'src')
                if os.path.exists(src_dir) and os.path.isdir(src_dir):
                    for dir_name in auth_dirs:
                        dir_path = os.path.join(src_dir, dir_name)
                        if os.path.exists(dir_path) and os.path.isdir(dir_path):
                            auth_dir = dir_path
                            break
            
            if auth_dir is None:
                # Look in app directory
                app_dir = os.path.join(project_dir, 'app')
                if os.path.exists(app_dir) and os.path.isdir(app_dir):
                    for dir_name in auth_dirs:
                        dir_path = os.path.join(app_dir, dir_name)
                        if os.path.exists(dir_path) and os.path.isdir(dir_path):
                            auth_dir = dir_path
                            break
            
            if auth_dir is None:
                auth_dir = project_dir
        
        logger.info(f"Using authentication directory: {auth_dir}")
        
        # Create password policy module
        if not create_password_policy_module(auth_dir):
            logger.error("Failed to create password policy module")
            return False
        
        # Update user model
        if not update_user_model(auth_dir):
            logger.error("Failed to update user model")
            return False
        
        # Update authentication controller
        if not update_auth_controller(auth_dir):
            logger.error("Failed to update authentication controller")
            return False
        
        # Update .env file
        if not update_env_file(project_dir):
            logger.error("Failed to update .env file")
            return False
        
        # Update Kubernetes configuration
        if not update_kubernetes_config(project_dir):
            logger.error("Failed to update Kubernetes configuration")
            return False
        
        logger.info("Successfully enforced password policies")
        return True
        
    except Exception as e:
        logger.error(f"Error enforcing password policies: {str(e)}")
        return False

def main():
    """
    Main function.
    """
    parser = argparse.ArgumentParser(description='Enforce password policies for the EyewearML platform')
    parser.add_argument('--project-dir', type=str, default=os.getcwd(), help='Directory containing the project files')
    parser.add_argument('--auth-dir', type=str, help='Directory containing the authentication code')
    
    args = parser.parse_args()
    
    if enforce_password_policy(args.project_dir, args.auth_dir):
        logger.info("Password policies enforced successfully")
    else:
        logger.error("Failed to enforce password policies")
        exit(1)

if __name__ == '__main__':
    main()