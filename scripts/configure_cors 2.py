#!/usr/bin/env python3
"""
Script to configure CORS headers for the EyewearML API.
This script updates the server configuration to properly handle CORS.
"""

import os
import re
import argparse
import logging
import shutil
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(f"cors_configuration_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
    ]
)

logger = logging.getLogger("cors_configuration")

def create_cors_middleware_file(api_dir):
    """
    Create CORS middleware file.
    
    Args:
        api_dir: Directory containing the API code
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Determine middleware directory
        middleware_dir = os.path.join(api_dir, "middleware")
        if not os.path.exists(middleware_dir):
            os.makedirs(middleware_dir)
            logger.info(f"Created middleware directory: {middleware_dir}")
        
        # Create CORS middleware file
        cors_file = os.path.join(middleware_dir, "cors.py")
        
        with open(cors_file, 'w') as f:
            f.write("""
# CORS middleware for the EyewearML API
# Generated by configure_cors.py

import os
from flask import request, jsonify

class CORS:
    def __init__(self, app=None, allowed_origins=None, allowed_methods=None, allowed_headers=None, expose_headers=None, max_age=None, supports_credentials=False):
        self.app = app
        
        # Get CORS configuration from environment variables or use defaults
        self.allowed_origins = allowed_origins or os.environ.get('CORS_ALLOWED_ORIGINS', '*').split(',')
        self.allowed_methods = allowed_methods or os.environ.get('CORS_ALLOWED_METHODS', 'GET,POST,PUT,DELETE,OPTIONS').split(',')
        self.allowed_headers = allowed_headers or os.environ.get('CORS_ALLOWED_HEADERS', 'Content-Type,Authorization,X-Requested-With,X-API-Key').split(',')
        self.expose_headers = expose_headers or os.environ.get('CORS_EXPOSE_HEADERS', '').split(',')
        self.max_age = max_age or os.environ.get('CORS_MAX_AGE', '86400')
        self.supports_credentials = supports_credentials or os.environ.get('CORS_SUPPORTS_CREDENTIALS', 'false').lower() == 'true'
        
        if app is not None:
            self.init_app(app)
    
    def init_app(self, app):
        app.after_request(self.add_cors_headers)
    
    def add_cors_headers(self, response):
        origin = request.headers.get('Origin')
        
        # Check if the origin is allowed
        if origin and (origin in self.allowed_origins or '*' in self.allowed_origins):
            response.headers['Access-Control-Allow-Origin'] = origin
        elif '*' in self.allowed_origins and not self.supports_credentials:
            response.headers['Access-Control-Allow-Origin'] = '*'
        
        # Add other CORS headers
        if request.method == 'OPTIONS':
            response.headers['Access-Control-Allow-Methods'] = ','.join(self.allowed_methods)
            response.headers['Access-Control-Allow-Headers'] = ','.join(self.allowed_headers)
            response.headers['Access-Control-Max-Age'] = self.max_age
        
        if self.expose_headers:
            response.headers['Access-Control-Expose-Headers'] = ','.join(self.expose_headers)
        
        if self.supports_credentials:
            response.headers['Access-Control-Allow-Credentials'] = 'true'
        
        return response

# Function to create CORS middleware
def create_cors_middleware(app, **kwargs):
    return CORS(app, **kwargs)

# FastAPI CORS middleware
class FastAPICORS:
    def __init__(self, allowed_origins=None, allowed_methods=None, allowed_headers=None, expose_headers=None, max_age=None, supports_credentials=False):
        # Get CORS configuration from environment variables or use defaults
        self.allowed_origins = allowed_origins or os.environ.get('CORS_ALLOWED_ORIGINS', '*').split(',')
        self.allowed_methods = allowed_methods or os.environ.get('CORS_ALLOWED_METHODS', 'GET,POST,PUT,DELETE,OPTIONS').split(',')
        self.allowed_headers = allowed_headers or os.environ.get('CORS_ALLOWED_HEADERS', 'Content-Type,Authorization,X-Requested-With,X-API-Key').split(',')
        self.expose_headers = expose_headers or os.environ.get('CORS_EXPOSE_HEADERS', '').split(',')
        self.max_age = max_age or int(os.environ.get('CORS_MAX_AGE', '86400'))
        self.supports_credentials = supports_credentials or os.environ.get('CORS_SUPPORTS_CREDENTIALS', 'false').lower() == 'true'
    
    async def __call__(self, request, call_next):
        response = await call_next(request)
        
        origin = request.headers.get('Origin')
        
        # Check if the origin is allowed
        if origin and (origin in self.allowed_origins or '*' in self.allowed_origins):
            response.headers['Access-Control-Allow-Origin'] = origin
        elif '*' in self.allowed_origins and not self.supports_credentials:
            response.headers['Access-Control-Allow-Origin'] = '*'
        
        # Add other CORS headers
        if request.method == 'OPTIONS':
            response.headers['Access-Control-Allow-Methods'] = ','.join(self.allowed_methods)
            response.headers['Access-Control-Allow-Headers'] = ','.join(self.allowed_headers)
            response.headers['Access-Control-Max-Age'] = str(self.max_age)
        
        if self.expose_headers:
            response.headers['Access-Control-Expose-Headers'] = ','.join(self.expose_headers)
        
        if self.supports_credentials:
            response.headers['Access-Control-Allow-Credentials'] = 'true'
        
        return response
""")
        
        logger.info(f"Created CORS middleware: {cors_file}")
        return True
        
    except Exception as e:
        logger.error(f"Error creating CORS middleware: {str(e)}")
        return False

def update_server_file(api_dir):
    """
    Update server file to use CORS middleware.
    
    Args:
        api_dir: Directory containing the API code
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Find server file
        server_file = None
        for root, dirs, files in os.walk(api_dir):
            for file in files:
                if file in ['server.py', 'app.py', 'main.py']:
                    server_file = os.path.join(root, file)
                    break
            if server_file:
                break
        
        if not server_file:
            logger.error("Could not find server file")
            return False
        
        # Create backup of server file
        backup_file = f"{server_file}.bak"
        shutil.copy2(server_file, backup_file)
        logger.info(f"Created backup of server file: {backup_file}")
        
        # Read server file
        with open(server_file, 'r') as f:
            content = f.read()
        
        # Check if Flask is used
        if 'from flask import' in content:
            # Add import for CORS middleware
            if 'from middleware.cors import' not in content:
                import_pattern = r'(from flask import .*?\n)'
                import_replacement = r'\1from middleware.cors import create_cors_middleware\n'
                content = re.sub(import_pattern, import_replacement, content)
            
            # Add CORS middleware initialization
            if 'create_cors_middleware' not in content:
                app_pattern = r'(app = Flask\(__name__\).*?\n)'
                app_replacement = r'\1\n# Initialize CORS middleware\ncors = create_cors_middleware(app)\n'
                content = re.sub(app_pattern, app_replacement, content)
        
        # Check if FastAPI is used
        elif 'from fastapi import' in content:
            # Add import for CORS middleware
            if 'from middleware.cors import' not in content:
                import_pattern = r'(from fastapi import .*?\n)'
                import_replacement = r'\1from middleware.cors import FastAPICORS\n'
                content = re.sub(import_pattern, import_replacement, content)
            
            # Add CORS middleware
            if 'FastAPICORS' not in content:
                app_pattern = r'(app = FastAPI\(\).*?\n)'
                app_replacement = r'\1\n# Initialize CORS middleware\napp.add_middleware(FastAPICORS)\n'
                content = re.sub(app_pattern, app_replacement, content)
        
        else:
            logger.error("Could not determine web framework used in server file")
            return False
        
        # Write updated content back to server file
        with open(server_file, 'w') as f:
            f.write(content)
        
        logger.info(f"Updated server file to use CORS middleware: {server_file}")
        return True
        
    except Exception as e:
        logger.error(f"Error updating server file: {str(e)}")
        return False

def update_env_file(project_dir):
    """
    Update .env file with CORS configuration.
    
    Args:
        project_dir: Project directory
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Find .env file
        env_files = ['.env', '.env.development', '.env.production', '.env.example']
        env_file = None
        
        for file in env_files:
            file_path = os.path.join(project_dir, file)
            if os.path.exists(file_path):
                env_file = file_path
                break
        
        if not env_file:
            # Create .env file if it doesn't exist
            env_file = os.path.join(project_dir, '.env')
            with open(env_file, 'w') as f:
                f.write("# Environment variables for the EyewearML application\n\n")
        
        # Read .env file
        with open(env_file, 'r') as f:
            lines = f.readlines()
        
        # Check if CORS configuration already exists
        cors_config = {
            'CORS_ALLOWED_ORIGINS': 'https://eyewear-ml.example.com,https://admin.eyewear-ml.example.com',
            'CORS_ALLOWED_METHODS': 'GET,POST,PUT,DELETE,OPTIONS',
            'CORS_ALLOWED_HEADERS': 'Content-Type,Authorization,X-Requested-With,X-API-Key',
            'CORS_EXPOSE_HEADERS': 'Content-Length,Content-Range',
            'CORS_MAX_AGE': '86400',
            'CORS_SUPPORTS_CREDENTIALS': 'false'
        }
        
        # Add CORS configuration if it doesn't exist
        cors_section_added = False
        for i, line in enumerate(lines):
            if line.strip() == "# CORS Configuration":
                cors_section_added = True
                break
        
        if not cors_section_added:
            lines.append("\n# CORS Configuration\n")
            for key, value in cors_config.items():
                lines.append(f"{key}={value}\n")
        
        # Write updated .env file
        with open(env_file, 'w') as f:
            f.writelines(lines)
        
        logger.info(f"Updated .env file with CORS configuration: {env_file}")
        return True
        
    except Exception as e:
        logger.error(f"Error updating .env file: {str(e)}")
        return False

def update_kubernetes_config(project_dir):
    """
    Update Kubernetes configuration with CORS environment variables.
    
    Args:
        project_dir: Project directory
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Find Kubernetes deployment file
        k8s_dir = os.path.join(project_dir, 'kubernetes')
        if not os.path.exists(k8s_dir):
            logger.warning(f"Kubernetes directory not found: {k8s_dir}")
            return True
        
        deployment_file = None
        for root, dirs, files in os.walk(k8s_dir):
            for file in files:
                if file.endswith('.yaml') or file.endswith('.yml'):
                    with open(os.path.join(root, file), 'r') as f:
                        content = f.read()
                        if 'kind: Deployment' in content:
                            deployment_file = os.path.join(root, file)
                            break
            if deployment_file:
                break
        
        if not deployment_file:
            logger.warning("Could not find Kubernetes deployment file")
            return True
        
        # Create backup of deployment file
        backup_file = f"{deployment_file}.bak"
        shutil.copy2(deployment_file, backup_file)
        logger.info(f"Created backup of Kubernetes deployment file: {backup_file}")
        
        # Read deployment file
        with open(deployment_file, 'r') as f:
            content = f.read()
        
        # Check if CORS environment variables already exist
        cors_env_vars = """
            - name: CORS_ALLOWED_ORIGINS
              value: "https://eyewear-ml.example.com,https://admin.eyewear-ml.example.com"
            - name: CORS_ALLOWED_METHODS
              value: "GET,POST,PUT,DELETE,OPTIONS"
            - name: CORS_ALLOWED_HEADERS
              value: "Content-Type,Authorization,X-Requested-With,X-API-Key"
            - name: CORS_EXPOSE_HEADERS
              value: "Content-Length,Content-Range"
            - name: CORS_MAX_AGE
              value: "86400"
            - name: CORS_SUPPORTS_CREDENTIALS
              value: "false"
"""
        
        if 'CORS_ALLOWED_ORIGINS' not in content:
            # Add CORS environment variables
            env_pattern = r'(containers:.*?env:.*?)(\n\s+- name:|\n\s+volumeMounts:|\n\s+resources:)'
            env_replacement = f"\\1{cors_env_vars}\\2"
            content = re.sub(env_pattern, env_replacement, content, flags=re.DOTALL)
        
        # Write updated content back to deployment file
        with open(deployment_file, 'w') as f:
            f.write(content)
        
        logger.info(f"Updated Kubernetes deployment file with CORS environment variables: {deployment_file}")
        return True
        
    except Exception as e:
        logger.error(f"Error updating Kubernetes configuration: {str(e)}")
        return False

def configure_cors(project_dir, api_dir=None):
    """
    Configure CORS headers for the EyewearML API.
    
    Args:
        project_dir: Project directory
        api_dir: API directory (if None, will try to find it)
        
    Returns:
        True if successful, False otherwise
    """
    try:
        # Determine API directory if not provided
        if api_dir is None:
            # Common API directory names
            api_dirs = ['api', 'backend', 'server', 'app', 'src']
            
            for dir_name in api_dirs:
                dir_path = os.path.join(project_dir, dir_name)
                if os.path.exists(dir_path) and os.path.isdir(dir_path):
                    api_dir = dir_path
                    break
            
            if api_dir is None:
                api_dir = project_dir
        
        logger.info(f"Using API directory: {api_dir}")
        
        # Create CORS middleware
        if not create_cors_middleware_file(api_dir):
            logger.error("Failed to create CORS middleware")
            return False
        
        # Update server file
        if not update_server_file(api_dir):
            logger.error("Failed to update server file")
            return False
        
        # Update .env file
        if not update_env_file(project_dir):
            logger.error("Failed to update .env file")
            return False
        
        # Update Kubernetes configuration
        if not update_kubernetes_config(project_dir):
            logger.error("Failed to update Kubernetes configuration")
            return False
        
        logger.info("Successfully configured CORS headers")
        return True
        
    except Exception as e:
        logger.error(f"Error configuring CORS headers: {str(e)}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Configure CORS headers for the EyewearML API')
    parser.add_argument('--project-dir', default='.', help='Project directory')
    parser.add_argument('--api-dir', help='API directory (if not provided, will try to find it)')
    
    args = parser.parse_args()
    
    if configure_cors(args.project_dir, args.api_dir):
        logger.info("CORS configuration completed successfully")
    else:
        logger.error("CORS configuration failed")
        exit(1)

if __name__ == "__main__":
    main()